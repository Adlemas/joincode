<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="/img/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="/style/index.css">

    <link rel="stylesheet" href="/codemirror/theme/3024-day.css">
    <link rel="stylesheet" href="/codemirror/theme/3024-night.css">
    <link rel="stylesheet" href="/codemirror/theme/abbott.css">
    <link rel="stylesheet" href="/codemirror/theme/abcdef.css">
    <link rel="stylesheet" href="/codemirror/theme/ambiance-mobile.css">
    <link rel="stylesheet" href="/codemirror/theme/ambiance.css">
    <link rel="stylesheet" href="/codemirror/theme/ayu-dark.css">
    <link rel="stylesheet" href="/codemirror/theme/ayu-mirage.css">
    <link rel="stylesheet" href="/codemirror/theme/base16-dark.css">
    <link rel="stylesheet" href="/codemirror/theme/base16-light.css">
    <link rel="stylesheet" href="/codemirror/theme/bespin.css">
    <link rel="stylesheet" href="/codemirror/theme/blackboard.css">
    <link rel="stylesheet" href="/codemirror/theme/cobalt.css">
    <link rel="stylesheet" href="/codemirror/theme/colorforth.css">
    <link rel="stylesheet" href="/codemirror/theme/darcula.css">
    <link rel="stylesheet" href="/codemirror/theme/dracula.css">
    <link rel="stylesheet" href="/codemirror/theme/duotone-dark.css">
    <link rel="stylesheet" href="/codemirror/theme/duotone-light.css">
    <link rel="stylesheet" href="/codemirror/theme/eclipse.css">
    <link rel="stylesheet" href="/codemirror/theme/elegant.css">
    <link rel="stylesheet" href="/codemirror/theme/erlang-dark.css">
    <link rel="stylesheet" href="/codemirror/theme/gruvbox-dark.css">
    <link rel="stylesheet" href="/codemirror/theme/hopscotch.css">
    <link rel="stylesheet" href="/codemirror/theme/icecoder.css">
    <link rel="stylesheet" href="/codemirror/theme/idea.css">
    <link rel="stylesheet" href="/codemirror/theme/isotope.css">
    <link rel="stylesheet" href="/codemirror/theme/juejin.css">
    <link rel="stylesheet" href="/codemirror/theme/lesser-dark.css">
    <link rel="stylesheet" href="/codemirror/theme/liquibyte.css">
    <link rel="stylesheet" href="/codemirror/theme/lucario.css">
    <link rel="stylesheet" href="/codemirror/theme/material-darker.css">
    <link rel="stylesheet" href="/codemirror/theme/material-ocean.css">
    <link rel="stylesheet" href="/codemirror/theme/material-palenight.css">
    <link rel="stylesheet" href="/codemirror/theme/material.css">
    <link rel="stylesheet" href="/codemirror/theme/mbo.css">
    <link rel="stylesheet" href="/codemirror/theme/mdn-like.css">
    <link rel="stylesheet" href="/codemirror/theme/midnight.css">
    <link rel="stylesheet" href="/codemirror/theme/monokai.css">
    <link rel="stylesheet" href="/codemirror/theme/moxer.css">
    <link rel="stylesheet" href="/codemirror/theme/neat.css">
    <link rel="stylesheet" href="/codemirror/theme/neo.css">
    <link rel="stylesheet" href="/codemirror/theme/night.css">
    <link rel="stylesheet" href="/codemirror/theme/nord.css">
    <link rel="stylesheet" href="/codemirror/theme/oceanic-next.css">
    <link rel="stylesheet" href="/codemirror/theme/panda-syntax.css">
    <link rel="stylesheet" href="/codemirror/theme/paraiso-dark.css">
    <link rel="stylesheet" href="/codemirror/theme/paraiso-light.css">
    <link rel="stylesheet" href="/codemirror/theme/pastel-on-dark.css">
    <link rel="stylesheet" href="/codemirror/theme/railscasts.css">
    <link rel="stylesheet" href="/codemirror/theme/rubyblue.css">
    <link rel="stylesheet" href="/codemirror/theme/seti.css">
    <link rel="stylesheet" href="/codemirror/theme/shadowfox.css">
    <link rel="stylesheet" href="/codemirror/theme/solarized.css">
    <link rel="stylesheet" href="/codemirror/theme/ssms.css">
    <link rel="stylesheet" href="/codemirror/theme/the-matrix.css">
    <link rel="stylesheet" href="/codemirror/theme/tomorrow-night-bright.css">
    <link rel="stylesheet" href="/codemirror/theme/tomorrow-night-eighties.css">
    <link rel="stylesheet" href="/codemirror/theme/ttcn.css">
    <link rel="stylesheet" href="/codemirror/theme/twilight.css">
    <link rel="stylesheet" href="/codemirror/theme/vibrant-ink.css">
    <link rel="stylesheet" href="/codemirror/theme/xq-dark.css">
    <link rel="stylesheet" href="/codemirror/theme/xq-light.css">
    <link rel="stylesheet" href="/codemirror/theme/yeti.css">
    <link rel="stylesheet" href="/codemirror/theme/yonce.css">
    <link rel="stylesheet" href="/codemirror/theme/zenburn.css">

    <link rel="stylesheet" href="/codemirror/lib/codemirror.css">
    <link rel="stylesheet" href="/codemirror/theme/dracula.css">
    <link rel="stylesheet" href="/codemirror/theme/darcula.css">
    <link rel="stylesheet" href="/codemirror/theme/ayu-mirage.css">
    <link rel="stylesheet" href="/codemirror/addon/fold/foldgutter.css">
    <link rel="stylesheet" href="/codemirror/addon/hint/show-hint.css">
    <link rel="stylesheet" href="/codemirror/addon/lint/lint.css">
    <script src="/codemirror/lib/codemirror.js"></script>
    <script src="/codemirror/mode/javascript/javascript.js"></script>
    <script src="/codemirror/mode/xml/xml.js"></script>
    <script src="/codemirror/mode/css/css.js"></script>
    <script src="/codemirror/mode/htmlmixed/htmlmixed.js"></script>
    <script src="/codemirror/addon/edit/matchbrackets.js"></script>
    <script src="/codemirror/addon/edit/closebrackets.js"></script>
    <script src="/codemirror/addon/edit/trailingspace.js"></script>
    <script src="/codemirror/addon/edit/closetag.js"></script>
    <script src="/codemirror/addon/edit/continuelist.js"></script>
    <script src="/codemirror/addon/display/placeholder.js"></script>
    <script src="/codemirror/addon/comment/continuecomment.js"></script>
    <script src="/codemirror/addon/comment/comment.js"></script>
    <script src="/codemirror/addon/fold/brace-fold.js"></script>
    <script src="/codemirror/addon/fold/comment-fold.js"></script>
    <script src="/codemirror/addon/fold/foldcode.js"></script>
    <script src="/codemirror/addon/fold/foldgutter.js"></script>
    <script src="/codemirror/addon/fold/indent-fold.js"></script>
    <script src="/codemirror/addon/hint/show-hint.js"></script>
    <script src="/codemirror/addon/hint/javascript-hint.js"></script>
    <script src="/codemirror/addon/hint/anyword-hint.js"></script>
    <script src="/codemirror/addon/hint/css-hint.js"></script>
    <script src="/codemirror/addon/hint/html-hint.js"></script>
    <script src="/codemirror/addon/hint/xml-hint.js"></script>
    <script src="/codemirror/addon/lint/lint.js"></script>
    <script src="/codemirror/addon/lint/javascript-lint.js"></script>
    <script src="/codemirror/addon/selection/active-line.js"></script>
    <link rel="stylesheet" href="/codemirror/addon/dialog/dialog.css">
    <link rel="stylesheet" href="/codemirror/addon/search/matchesonscrollbar.css">
    <script src="/codemirror/addon/dialog/dialog.js"></script>
    <script src="/codemirror/addon/search/searchcursor.js"></script>
    <script src="/codemirror/addon/search/search.js"></script>
    <script src="/codemirror/addon/scroll/annotatescrollbar.js"></script>
    <script src="/codemirror/addon/search/matchesonscrollbar.js"></script>
    <script src="/src/editor.js"></script>
    <link rel="stylesheet" href="/style/sync.css">

    <title>JoinCode - Together</title>
</head>
<body>
    <!-- Take Name Modal -->
    <div class="customer-modal" id="customer.modal" style="display: none;">
        <div class="customer-modal-content">
            <h3>Choouse your account:</h3>
            <ul style="width: 100%; display: flex; align-items: center; flex-direction: column;" id="customer-list">
                <% customers.forEach(customer => { %>
                    <li class="customer-item" data-target="<%- customer.name %>"><%- customer.name %></li>
                <% }) %>
            </ul>
            <hr width="90%" size=".5" color="#ccc">
            <div style="display: flex; flex-direction: column;">
                <input placeholder="Password..." type="text" id="customer.field" maxlength="20">
                <small id="customer.tip"></small>
            </div>
            <div class="btn" id="customer.btn">Ready!</div>
        </div>
    </div>
    <!-- Local CodeMirror editor -->
    <div class="wrapper" id="wrapper">
        <div class="editor" id="my-editor">
            <span class="pause" id="pause-background" style="display: none;">
                <img src="/img/pause.png" width="90" height="90" >
                <label>PAUSED</label>
            </span>
            <span id="editor"></span>
        </div>
    </div>
    <!-- Bottom Information Bar -->
    <span id="bottom-bar">
        <!-- Left side buttons -->
        <span class="left">
            <!-- Language Information -->
            <span id="language-info"><%- name %>'s Lesson</span>
        </span>
        <!-- Right side buttons -->
        <span class="right">
            <span id="users-info">Only you there</span>
        </span>
    </span>

    <!-- Right Tools Bar -->
    <span class="right-bar" id="right-bar" data-open="0">
        <span id="build.btn">
            <img src="/img/build.png" title="Build Project" width="30" height="30" >
        </span>
        <span id="disconnect.btn">
            <img src="/img/broken-link.png" title="Disconnect" width="28" height="28">
        </span>
        <span id="pause.btn">
            <img src="/img/pause-play.png" title="Pause/Unpause me" width="28" height="28">
        </span>
    </span>

    <!-- <script src="//ajax.aspnetcdn.com/ajax/jshint/r07/jshint.js"></script> -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jshint/2.13.1/jshint.min.js"></script>
    <script>

        const extension = 'html';

        const config = {
            js: {
                name: 'JavaScript',
                commentUnit: '/*'
            },
            html: {
                name: 'htmlmixed',
                commentUnit: '<!--'
            }
        }

        const changeLanguage = () => {
            if(!config[extension]) return;
            if(!config[extension].name) return;
            editor.setOption('mode', config[extension].name.toLowerCase());
            document.getElementById('language-info').innerText = config[extension].name;
        }


        const editor = new Editor(document.getElementById('editor'), config, extension, false, {
            theme: '<%- theme %>'
        })
        const remoteEditors = {}

    </script>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        var amIOwner = false, paused = false, canShowEditingToast = true;
        const socket = io();
        var name = "member#" + Math.round(Math.random() * 100) + 1;

        var toasts = []

        function toast(type, content) {
            if(toasts.length > 0) {
                var intervalID = setInterval(() => {
                    if(toasts.length <= 0) {
                        clearInterval(intervalID)
                        toast(type, content)
                    }
                }, 200);
                return intervalID;
            }
            const toastBody = document.createElement('div')
            toastBody.style.position = 'absolute'
            toastBody.style.bottom = '50px'
            toastBody.style.padding = '10px 7px'
            toastBody.style.borderRadius = '5px'
            toastBody.style.boxShadow = '0 0 10px rgba(100, 100, 100, .6)'
            toastBody.style.transition = '1.5s'
            toastBody.style.opacity = 0
            toastBody.style.fontFamily = '"Roboto", sans-serif'
            toastBody.style.fontWeight = '500'
            toastBody.style.fontSize = '14px'
            toastBody.style.right = '-100%'
            toastBody.style.userSelect = 'none'
            toastBody.style.pointerEvents = 'none'
            const txtNode = document.createTextNode(content)
            toastBody.appendChild(txtNode)
            if(type === 'success') {
                toastBody.style.background = 'lime'
                toastBody.style.border = '2px solid green'
                toastBody.style.color = '#000'
            } else if(type === 'error') {
                toastBody.style.background = 'crimson'
                toastBody.style.border = '2px solid red'
                toastBody.style.color = '#000'
            } else if (type === 'warning') {
                toastBody.style.background = 'yellow'
                toastBody.style.border = '2px solid orange'
                toastBody.style.color = '#000'
            } else {
                toastBody.style.background = 'dodgerblue'
                toastBody.style.border = '2px solid blue'
                toastBody.style.color = '#000'
            }
            document.body.appendChild(toastBody)
            toasts.push(toastBody)
            toastBody.dataset.index = toasts.length - 1
            setTimeout(() => {
                toastBody.style.right = '20px'
                setTimeout(() => {
                    toastBody.style.opacity = 1
                }, 200);
            }, 100);
            setTimeout(() => {
                toastBody.style.right = '-100%'
                toastBody.style.opacity = 0
                setTimeout(() => {
                    toastBody.remove()
                    toasts = toasts.filter((el, index) => index !== Number(el.dataset.index))
                }, 500);
            }, 3000);
        }

        function addUserEditor(id, name, isOwner, text = '', amIOwner) {
            if(!isOwner && !amIOwner) return;

            const newEditor = document.createElement('div')
            newEditor.className = 'editor'
            newEditor.dataset.id = id;
            const editor_body = document.createElement('span')
            newEditor.appendChild(editor_body)
            document.getElementById('wrapper').appendChild(newEditor)
            remoteEditors[id] = new RemoteEditor(editor_body, config, extension, {
                timeout: 0
            }, {
                theme: '<%- theme %>'
            })
            remoteEditors[id].setValue(text)

            const name_field = document.createElement('label')
            name_field.textContent = name
            name_field.style.fontSize = '12px'
            name_field.style.position = 'absolute'
            name_field.style.bottom = '30px'
            name_field.style.right = '10px'
            name_field.style.padding = '10px'
            name_field.style.borderRadius = '5px 2px'
            name_field.style.background = 'dodgerblue'
            name_field.style.color = '#fefefe'
            newEditor.appendChild(name_field)

            /* 
                <img src="/img/pause.png" width="90" height="90" >
                <label>PAUSED</label>
            */
            const pauseModal = document.createElement('span')
            pauseModal.className = 'pause'
            pauseModal.style.display = 'none'

            const img = document.createElement('img')
            img.src = '/img/pause.png'
            img.width = '90'
            img.height = '90'
            const label = document.createElement('label')
            label.textContent = 'PAUSED'

            pauseModal.appendChild(img)
            pauseModal.appendChild(label)
            newEditor.appendChild(pauseModal)
        }

        function deleteUser(id) {
            const editor = document.getElementById('wrapper').querySelector(`div[data-id="${id}"]`)
            if(!editor) return console.log(`Unexpected ${id} editor!`)
            document.getElementById('wrapper').removeChild(editor)
        }

        function buildProject() {
            if(!editor.editor.getValue()) return toast("error", "Cannot build empty code...")
            var buildWindow = window.open()
            buildWindow.document.write(editor.editor.getValue())
        }

        function disconnect() {
            window.location.replace('/')
        }
        
        function pauseUnpause() {
            if(!paused) document.getElementById('pause-background').style.display = 'flex'
            else document.getElementById('pause-background').style.display = 'none'
            if(paused) paused = false
            else paused = true

            console.log('pausing', name)

            if(paused) {
                socket.emit('pause', {
                    id: id,
                    name: name,
                    user: socket.id
                })
            } else {
                socket.emit('unpause', {
                    id: id,
                    name: name,
                    user: socket.id
                })
            }
        }

        function loginCustomer(roomName, userName, password) {
            fetch('/customer-login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: userName,
                    roomName: roomName,
                    password: password,
                    roomID: id
                })
            })
                .then(res => res.json())
                .then((json) => {
                    const { status, reason, members } = json
                    if(status === true) {
                        document.getElementById('customer.tip').textContent = 'Successfully!'
                        setTimeout(() => {
                            document.getElementById('customer.modal').style.display = 'none'
                        }, 100);
                        name = userName
                        members.forEach(member => {
                            addUserEditor(member.id, member.name, member.isOwner, member.text, amIOwner)
                        })
                    } else if(reason === 'incorrect') {
                        document.getElementById('customer.tip').textContent = 'Incorrect password...'
                        setTimeout(() => {
                            document.getElementById('customer.tip').textContent = ''
                        }, 2000);
                    } else {
                        document.getElementById('customer.tip').textContent = 'Server error!'
                        setTimeout(() => {
                            window.location.replace('/')
                        }, 2000);
                    }
                    document.getElementById('customer.btn').textContent = 'Ready!'
                    document.getElementById('customer.btn').style.background = 'dodgerblue'
                })
                .catch(err => console.log(err))
        }

        const url = location.href[location.href.length - 1] === '/' ? location.href.slice(0, location.href.length-1) : location.href
        const id = url.split('/').pop()

        if(id) {
            function setup() {

                document.getElementById('build.btn').onclick = buildProject
                document.getElementById('disconnect.btn').onclick = disconnect
                document.getElementById('pause.btn').onclick = pauseUnpause

                document.getElementById('customer.btn').onclick = function() {
                    if(amIOwner) return
                    if(document.getElementById('customer.btn').textContent !== 'Ready!') return;
                    const password = document.getElementById('customer.field').value;
                    if(!password) return (() => {
                        document.getElementById('customer.tip').textContent = 'Type a password...'
                        setTimeout(() => {
                            document.getElementById('customer.tip').textContent = ''
                        }, 3000);
                    })()
                    const selected = document.querySelector('.customer-item.selected');
                    if(!selected) return (() => {
                        document.getElementById('customer.tip').textContent = 'Choouse your customer account...'
                        setTimeout(() => {
                            document.getElementById('customer.tip').textContent = ''
                        }, 3000);
                    })()
                    const customerName = selected.textContent;
                    if(!customerName) return;
                    document.getElementById('customer.btn').textContent = 'Loading...'
                    document.getElementById('customer.btn').style.background = 'orangered'
                    loginCustomer(name, customerName, password)
                }

                document.querySelectorAll('.customer-item').forEach(el => {
                    el.addEventListener('click', function() {
                        const isSelected = ("selected" in this.classList)
                        if(document.querySelector('.customer-item.selected')) document.querySelector('.customer-item.selected').classList.remove("selected")
                        if(!isSelected) this.classList.add("selected")
                    })
                })

                document.getElementById('right-bar').onmouseover = function() {
                    document.getElementById('right-bar').style.right = 0
                }

                document.getElementById('right-bar').onmouseleave = function() {
                    document.getElementById('right-bar').style.right = '-40px'
                }

                document.getElementById('my-editor').style.border = '2.5px solid orange'
                socket.emit('join-room', {
                    id,
                    name
                })
                socket.on('joined-room', ({ status, roomID, userID, members, owner }) => {
                    if(status)
                    {
                        toast("success", `Joined successfully.`)
                        if(members.length > 0) {
                            document.getElementById('customer.modal').style.display = 'flex'
                            amIOwner = false;
                        } else amIOwner = true
                        if(amIOwner === true) name = '<%- name %>'
                        members.forEach(member => {
                            addUserEditor(member.id, member.name, member.isOwner, member.text, amIOwner)
                        })
                        document.getElementById('users-info').textContent = `${members.length + 1} members connected (with you)`
                        editor.editor.on('change', function (cm) {
                            socket.emit('text-change', {
                                text: cm.getValue(),
                                name: name,
                                id: roomID,
                                user: userID
                            })
                        })
                        editor.editor.on('cursorActivity', function (cm) {
                            const pos = cm.getCursor();
                            socket.emit('cursor-change', {
                                id: id,
                                name: name,
                                pos: pos,
                                user: socket.id
                            })
                        })
                        editor.editor.on('keyup', function(cm, event) {
                            if(event.which <= 90 && event.which >= 65 && !event.shiftKey && !event.ctrlKey) {
                                if (!cm.state.completionActive && /*Enables keyboard navigation in autocomplete list*/
                                    event.keyCode != 13) {        /*Enter - do not open autocomplete list just after item has been selected in it*/
                                        CodeMirror.commands.autocomplete(cm, null, { completeSingle: false });
                                }
                            }
                        })
                    }
                    else
                        window.location.replace('/')
                })
                socket.on('user-join', ({ id, name, membersCount }) => {
                    document.getElementById('users-info').textContent = `${membersCount + 1} members connected (with you)`
                    addUserEditor(id, name, false, '', amIOwner)
                    toast("success", `${name} connected.`)
                    toast("warning", `${name} logging...`)
                })
                socket.on('user-logged', ({ id, name }) => {
                    if(!remoteEditors[id]) return;
                    const editor = document.body.querySelector(`div[data-id="${id}"]`)
                    if(!editor) return
                    editor.querySelector('label').textContent = name
                    toast("info", `${name} logged.`)
                })
                socket.on('user-paused', ({ id, name }) => {
                    console.log('user-paused', id, name)
                    if(!remoteEditors[id]) return;
                    const pause = document.body.querySelector(`.editor[data-id="${id}"]`).querySelector('.pause')
                    if(!pause) return;
                    pause.style.display = 'flex'
                    toast("warning", `${name} paused.`)
                })
                socket.on('user-unpaused', ({ id, name }) => {
                    console.log('user-unpaused', id, name)
                    if (!remoteEditors[id]) return;
                    const pause = document.body.querySelector(`div[data-id="${id}"] > .pause`)
                    if (!pause) return;
                    pause.style.display = 'none'
                    toast("info", `${name} unpaused.`)
                })
                socket.on('user-leave', ({id, name, isOwner, membersCount}) => {
                    document.getElementById('users-info').textContent = `${membersCount} members connected (with you)`
                    if(isOwner) window.location.replace('/')
                    deleteUser(id)
                    toast("error", `${name} leaved.`)
                })
                window.onbeforeunload = function() {
                    socket.emit('disconnect')
                }
                socket.on('text-change', ({ text, name, id }) => {
                    if(!remoteEditors[id]) addUserEditor(id, name, false, text, amIOwner)
                    else {
                        if(canShowEditingToast) {
                            toast("warning", `${name} typing...`)
                            canShowEditingToast = false;
                            setTimeout(() => {
                                canShowEditingToast = true
                            }, 5000);
                        }
                        remoteEditors[id].setValue(text)
                    }
                })
                socket.on('cursor-change', ({ pos, name, id }) => {
                    if(!remoteEditors[id]) addUserEditor(id, name, false, '', amIOwner)
                    else {
                        remoteEditors[id].editor.setCursor(pos)
                    }
                })
            }
            setup()
        }
    </script>
</body>
</html>